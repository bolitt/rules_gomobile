commit 9d132a1f196756512c255fbe7b752f824d9adaed
Author: Steeve Morin <steeve@zen.ly>
Date:   Tue Aug 20 16:51:34 2019 +0200

    Fetch public headers via the multi arch split
    
    Fetch headers via the apple_common.multi_arch_split so that proper
    transitions are done. Since headers are assumed to be the same for all
    architectures, only the headers from the first split will be used.
    
    This is mostly useful if headers are generated.
    
    Fixes #466
    
    Signed-off-by: Steeve Morin <steeve@zen.ly>

diff --git a/apple/internal/ios_rules.bzl b/apple/internal/ios_rules.bzl
index ce5ed6a..8031be5 100644
--- a/apple/internal/ios_rules.bzl
+++ b/apple/internal/ios_rules.bzl
@@ -58,6 +58,10 @@ load(
     "@build_bazel_rules_apple//apple/internal/aspects:swift_static_framework_aspect.bzl",
     "SwiftStaticFrameworkInfo",
 )
+load(
+    "@build_bazel_rules_apple//apple/internal/utils:split.bzl",
+    "split",
+)
 load(
     "@build_bazel_rules_apple//apple:providers.bzl",
     "AppleBundleInfo",
@@ -217,7 +221,7 @@ def _ios_framework_impl(ctx):
             embeddable_targets = ctx.attr.frameworks,
         ),
         partials.extension_safe_validation_partial(is_extension_safe = ctx.attr.extension_safe),
-        partials.framework_headers_partial(hdrs = ctx.files.hdrs),
+        partials.framework_headers_partial(hdrs = split.files(ctx.attr.hdrs)),
         partials.framework_provider_partial(
             binary_provider = binary_target[apple_common.AppleDylibBinary],
         ),
@@ -330,7 +334,7 @@ def _ios_static_framework_impl(ctx):
     else:
         processor_partials.append(
             partials.static_framework_header_modulemap_partial(
-                hdrs = ctx.files.hdrs,
+                hdrs = split.files(ctx.attr.hdrs),
                 umbrella_header = ctx.file.umbrella_header,
                 binary_objc_provider = binary_target[apple_common.Objc],
             ),
diff --git a/apple/internal/rule_factory.bzl b/apple/internal/rule_factory.bzl
index dd3e147..3932880 100644
--- a/apple/internal/rule_factory.bzl
+++ b/apple/internal/rule_factory.bzl
@@ -542,6 +542,7 @@ Required.
             # what to do with this.
             "hdrs": attr.label_list(
                 allow_files = [".h"],
+                cfg = rule_descriptor.deps_cfg,
             ),
             "extension_safe": attr.bool(
                 default = False,
@@ -555,6 +556,7 @@ use only extension-safe APIs.
         attrs.append({
             "hdrs": attr.label_list(
                 allow_files = [".h"],
+                cfg = rule_descriptor.deps_cfg,
                 doc = """
 A list of `.h` files that will be publicly exposed by this framework. These headers should have
 framework-relative imports, and if non-empty, an umbrella header named `%{bundle_name}.h` will also
@@ -725,6 +727,7 @@ def _get_tvos_attrs(rule_descriptor):
             # what to do with this.
             "hdrs": attr.label_list(
                 allow_files = [".h"],
+                cfg = rule_descriptor.deps_cfg,
             ),
             "extension_safe": attr.bool(
                 default = False,
@@ -738,6 +741,7 @@ use only extension-safe APIs.
         attrs.append({
             "hdrs": attr.label_list(
                 allow_files = [".h"],
+                cfg = rule_descriptor.deps_cfg,
                 doc = """
 A list of `.h` files that will be publicly exposed by this framework. These headers should have
 framework-relative imports, and if non-empty, an umbrella header named `%{bundle_name}.h` will also
diff --git a/apple/internal/rule_support.bzl b/apple/internal/rule_support.bzl
index 151dee6..f202317 100644
--- a/apple/internal/rule_support.bzl
+++ b/apple/internal/rule_support.bzl
@@ -299,8 +299,7 @@ _RULE_TYPE_DESCRIPTORS = {
         apple_product_type.static_framework: _describe_rule_type(
             allowed_device_families = ["iphone", "ipad"],
             bundle_extension = ".framework",
-            deps_cfg = transition_support.static_framework_transition,
-            force_transition_whitelist = True,
+            deps_cfg = apple_common.multi_arch_split,
             has_infoplist = False,
             product_type = apple_product_type.static_framework,
             requires_bundle_id = False,
diff --git a/apple/internal/tvos_rules.bzl b/apple/internal/tvos_rules.bzl
index b733507..20a44d9 100644
--- a/apple/internal/tvos_rules.bzl
+++ b/apple/internal/tvos_rules.bzl
@@ -50,6 +50,10 @@ load(
     "@build_bazel_rules_apple//apple/internal/aspects:swift_static_framework_aspect.bzl",
     "SwiftStaticFrameworkInfo",
 )
+load(
+    "@build_bazel_rules_apple//apple/internal/utils:split.bzl",
+    "split",
+)
 load(
     "@build_bazel_rules_apple//apple:providers.bzl",
     "AppleBundleInfo",
@@ -176,7 +180,7 @@ def _tvos_framework_impl(ctx):
             embeddable_targets = ctx.attr.frameworks,
         ),
         partials.extension_safe_validation_partial(is_extension_safe = ctx.attr.extension_safe),
-        partials.framework_headers_partial(hdrs = ctx.files.hdrs),
+        partials.framework_headers_partial(hdrs = split.files(ctx.attr.hdrs)),
         partials.framework_provider_partial(binary_provider = binary_provider),
         partials.resources_partial(
             bundle_id = bundle_id,
diff --git a/apple/internal/utils/split.bzl b/apple/internal/utils/split.bzl
new file mode 100644
index 0000000..2ee4816
--- /dev/null
+++ b/apple/internal/utils/split.bzl
@@ -0,0 +1,25 @@
+# Copyright 2019 The Bazel Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Convenience functions for split_attr."""
+
+def _files(attr):
+    """Get the files from the first split."""
+    for v in attr:
+        return v.files.to_list()
+    return []
+
+split = struct(
+    files = _files,
+)
